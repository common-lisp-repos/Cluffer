----------------------- REVIEW 1 ---------------------
PAPER: 10
TITLE: First-class Global Environments in Common Lisp
AUTHORS: Robert Strandh

OVERALL EVALUATION: 3 (strong accept)
REVIEWER'S CONFIDENCE: 4 (high)

----------- REVIEW -----------
A well-written paper.

Some discussion of 'environments' in Common Lisp should be found in
the CL standards discussions mailing list.  (
http://www.saildart.org/MSG.MSG[X3,LSP] )

See also:

'Issue SYNTACTIC-ENVIRONMENT-ACCESS Writeup'

http://www.lispworks.com/documentation/HyperSpec/Issues/iss342_w.htm


I like the look on previous work, the motivating application areas and
the protocol definition.

What it lacks is one or more examples. It might also show how useful
the proposed protocol actually is to implement these examples.

----------------------- REVIEW 2 ---------------------
PAPER: 10
TITLE: First-class Global Environments in Common Lisp
AUTHORS: Robert Strandh

OVERALL EVALUATION: 2 (accept)
REVIEWER'S CONFIDENCE: 4 (high)

----------- REVIEW -----------
This paper proposes the implementation and deployment of Common Lisp
environments which are first-class (so you can hand them around as you
would any other object) and global (the Appendix covers function,
variable, class, setf-expander, and package definitions).

I'd be happier if the paper were a little less abstract. Could the
author come up with an example in which:

1. an environment is created and its innards exposed for the reader to
see, and

2. the method by which the (compiled) code accessed the current global
environment and then used that to dispatch correctly to functions, or
to retrieve symbol values is also made clear.

I suspect that people with some implementation experience will
appreciate why cons cells are used for function & variable values (and
nothing else), but an explicit explanation for everybody else might be
a kindness.

The abstract says that there is no performance penalty associated with
these environments, but the body of the paper does not back that up.

I will admit to not having carefully checked all ~40 entries in the
Appendix. Reading the definition of function-inline made me wonder
what an "inline GF" actually means -- the dispatch code? or the
methods as well?

I found a grand total of two typos:

Section 2.4: "the possibility of sharing bindings between first-class
environment" --> environments (plural)

References [4]: "Self-sustaining systems. chapter SBCL: ..." Should
that be "Chapter"? Which chapter?

----------------------- REVIEW 3 ---------------------
PAPER: 10
TITLE: First-class Global Environments in Common Lisp
AUTHORS: Robert Strandh

OVERALL EVALUATION: 1 (weak accept)
REVIEWER'S CONFIDENCE: 4 (high)

----------- REVIEW -----------
This paper aims to show the benefits of first-class global
environments and to show there is no performance penalty in making the
global environment first-class.

The "benefits" part of the paper is good as is the introduction to
first-class environments.  However, the implementation part (1/4 of a
page section 3) is very weak, and the analysis of performance is
missing.  The implementation details should be discussed in more
detail and a diagram showing the implementation and comparing it to a
non-first-class implementation (SBCL?) would be enlightening.  The
protocol described in the appendix does not really help to understand,
as it requires a deep knowledge of the Common-Lisp methods for
accessing the global environment.  In other words, the "big picture"
of how the implementation works is missing.

Typos:

- Section 2.2: "then ours" -> "than ours"

- Section 2.4: "desicribes lexicons" -> "describes lexicons"
